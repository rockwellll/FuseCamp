#!/usr/bin/env ruby

require 'fileutils'
require 'os'

# path to your application root.
APP_ROOT = File.expand_path('..', __dir__)

def log(message)
  puts "[ bin/setup ] #{message}"
end

def setup
  log 'Installing gems'

  # Only do bundle install if the much-faster
  # bundle check indicates we need to
  system! 'bundle check || bundle install'

  log 'Installing Node modules'

  # Only do yarn install if the much-faster
  # yarn check indicates we need to. Note that
  # --check-files is needed to force Yarn to actually
  # examine what's in node_modules
  #

  system! 'bin/yarn check --check-files || bin/yarn install'

  log 'Dropping & recreating the development database'

  # Note that the very first time this runs, db:reset
  # will fail, but this failure is fixed by
  # doing a db:migrate

  system! 'bin/rails db:reset || bin/rails db:migrate'

  log 'Dropping & recreating the test database'

  log 'seeding the database'

  system! 'bin/rails db:seed'

  # Setting the RAILS_ENV explicitly to be sure
  # we actually reset the test database

  system!({ 'RAILS_ENV' => 'test' }, 'bin/rails db:reset')

  log 'All set up.'
  log ''
  log 'To see commonly-needed commands, run:'
  log ''
  log ' bin/setup help'
  log ''
end

def help
  log 'Useful commands:'
  log ''
  log ' bin/run'
  log ' # run app locally'
  log ''

  # TODO
  # log " bin/ci"
  # log " # runs all tests and checks as CI would"
  # log ""

  log ' bin/rails test'
  log ' # run non-system tests'
  log ''
  log ' bin/rails test:system'
  log ' # run system tests'
  log ''
  log ' bin/setup help'
  log ' # show this help'
  log ''
  log ' bin/setup db:reseed'
  log ' # re run the migrations folder and seed the database'
  log ''
end

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

def setup_db
  log 'resetting the database'
  system! 'bin/rails db:migrate:reset'

  log 'seeding the database'
  system! 'bin/rails db:seed'
end

if ARGV[0] == 'help'
  help
elsif ARGV[0] == 'db:reseed'
  setup_db
else
  setup
end
